import { gql } from '@apollo/client'
import * as Apollo from '@apollo/client'
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K]
}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>
}
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>
}
const defaultOptions = {} as const
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  ISO8601DateTime: string
}

/** Autogenerated input type of CreateGolf */
export type CreateGolfInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  params: GolfAttributes
}

/** Autogenerated return type of CreateGolf */
export type CreateGolfPayload = {
  __typename?: 'CreateGolfPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  golf: Golf
}

/** Autogenerated input type of CreateInquiry */
export type CreateInquiryInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  params: InquiryAttributes
}

/** Autogenerated return type of CreateInquiry */
export type CreateInquiryPayload = {
  __typename?: 'CreateInquiryPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  inquiry: Inquiry
}

/** Autogenerated input type of DeleteGolf */
export type DeleteGolfInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  id: Scalars['ID']
}

/** Autogenerated return type of DeleteGolf */
export type DeleteGolfPayload = {
  __typename?: 'DeleteGolfPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  id: Scalars['ID']
}

export type Golf = {
  __typename?: 'Golf'
  createdAt: Scalars['ISO8601DateTime']
  description?: Maybe<Scalars['String']>
  id: Scalars['ID']
  title?: Maybe<Scalars['String']>
  updatedAt: Scalars['ISO8601DateTime']
}

export type GolfAttributes = {
  description?: InputMaybe<Scalars['String']>
  title?: InputMaybe<Scalars['String']>
}

export type Inquiry = {
  __typename?: 'Inquiry'
  contact?: Maybe<Scalars['String']>
  createdAt: Scalars['ISO8601DateTime']
  description?: Maybe<Scalars['String']>
  id: Scalars['ID']
  name?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  updatedAt: Scalars['ISO8601DateTime']
}

export type InquiryAttributes = {
  contact: Scalars['String']
  description: Scalars['String']
  name: Scalars['String']
  title: Scalars['String']
}

export type Mutation = {
  __typename?: 'Mutation'
  createGolf?: Maybe<CreateGolfPayload>
  createInquiry?: Maybe<CreateInquiryPayload>
  deleteGolf?: Maybe<DeleteGolfPayload>
  updateGolf?: Maybe<UpdateGolfPayload>
}

export type MutationCreateGolfArgs = {
  input: CreateGolfInput
}

export type MutationCreateInquiryArgs = {
  input: CreateInquiryInput
}

export type MutationDeleteGolfArgs = {
  input: DeleteGolfInput
}

export type MutationUpdateGolfArgs = {
  input: UpdateGolfInput
}

export type Query = {
  __typename?: 'Query'
  currentUser: User
  golf: Golf
  golfs: Array<Golf>
  inquiries: Array<Inquiry>
  inquiry: Inquiry
  /** An example field added by the generator */
  testField: Scalars['String']
}

export type QueryGolfArgs = {
  id: Scalars['ID']
}

export type QueryInquiryArgs = {
  id: Scalars['ID']
}

/** Autogenerated input type of UpdateGolf */
export type UpdateGolfInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  id: Scalars['ID']
  params: GolfAttributes
}

/** Autogenerated return type of UpdateGolf */
export type UpdateGolfPayload = {
  __typename?: 'UpdateGolfPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  golf: Golf
}

export type User = {
  __typename?: 'User'
  createdAt: Scalars['ISO8601DateTime']
  email: Scalars['String']
  encryptedPassword: Scalars['String']
  id: Scalars['ID']
  jti?: Maybe<Scalars['String']>
  rememberCreatedAt?: Maybe<Scalars['ISO8601DateTime']>
  resetPasswordSentAt?: Maybe<Scalars['ISO8601DateTime']>
  resetPasswordToken?: Maybe<Scalars['String']>
  updatedAt: Scalars['ISO8601DateTime']
}

export type CreateGolfMutationVariables = Exact<{
  input: CreateGolfInput
}>

export type CreateGolfMutation = {
  __typename?: 'Mutation'
  createGolf?: {
    __typename?: 'CreateGolfPayload'
    golf: {
      __typename?: 'Golf'
      id: string
      title?: string | null
      description?: string | null
    }
  } | null
}

export type CreateInquiryMutationVariables = Exact<{
  input: CreateInquiryInput
}>

export type CreateInquiryMutation = {
  __typename?: 'Mutation'
  createInquiry?: {
    __typename?: 'CreateInquiryPayload'
    inquiry: {
      __typename?: 'Inquiry'
      id: string
      title?: string | null
      description?: string | null
      name?: string | null
      contact?: string | null
    }
  } | null
}

export type DeleteGolfMutationVariables = Exact<{
  input: DeleteGolfInput
}>

export type DeleteGolfMutation = {
  __typename?: 'Mutation'
  deleteGolf?: { __typename?: 'DeleteGolfPayload'; id: string } | null
}

export type UpdateGolfMutationVariables = Exact<{
  input: UpdateGolfInput
}>

export type UpdateGolfMutation = {
  __typename?: 'Mutation'
  updateGolf?: {
    __typename?: 'UpdateGolfPayload'
    golf: {
      __typename?: 'Golf'
      id: string
      title?: string | null
      description?: string | null
    }
  } | null
}

export type CurrentUserQueryVariables = Exact<{ [key: string]: never }>

export type CurrentUserQuery = {
  __typename?: 'Query'
  currentUser: { __typename?: 'User'; id: string; email: string }
}

export type GolfQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type GolfQuery = {
  __typename?: 'Query'
  golf: {
    __typename?: 'Golf'
    id: string
    title?: string | null
    description?: string | null
  }
}

export type GolfsQueryVariables = Exact<{ [key: string]: never }>

export type GolfsQuery = {
  __typename?: 'Query'
  golfs: Array<{
    __typename?: 'Golf'
    id: string
    title?: string | null
    description?: string | null
  }>
}

export type InquiriesQueryVariables = Exact<{ [key: string]: never }>

export type InquiriesQuery = {
  __typename?: 'Query'
  inquiries: Array<{
    __typename?: 'Inquiry'
    id: string
    title?: string | null
    description?: string | null
    name?: string | null
    contact?: string | null
  }>
}

export type InquiryQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type InquiryQuery = {
  __typename?: 'Query'
  inquiry: {
    __typename?: 'Inquiry'
    id: string
    title?: string | null
    description?: string | null
    name?: string | null
    contact?: string | null
  }
}

export const CreateGolfDocument = gql`
  mutation createGolf($input: CreateGolfInput!) {
    createGolf(input: $input) {
      golf {
        id
        title
        description
      }
    }
  }
`
export type CreateGolfMutationFn = Apollo.MutationFunction<
  CreateGolfMutation,
  CreateGolfMutationVariables
>

/**
 * __useCreateGolfMutation__
 *
 * To run a mutation, you first call `useCreateGolfMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateGolfMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createGolfMutation, { data, loading, error }] = useCreateGolfMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateGolfMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateGolfMutation,
    CreateGolfMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<CreateGolfMutation, CreateGolfMutationVariables>(
    CreateGolfDocument,
    options,
  )
}
export type CreateGolfMutationHookResult = ReturnType<
  typeof useCreateGolfMutation
>
export type CreateGolfMutationResult = Apollo.MutationResult<CreateGolfMutation>
export type CreateGolfMutationOptions = Apollo.BaseMutationOptions<
  CreateGolfMutation,
  CreateGolfMutationVariables
>
export const CreateInquiryDocument = gql`
  mutation createInquiry($input: CreateInquiryInput!) {
    createInquiry(input: $input) {
      inquiry {
        id
        title
        description
        name
        contact
      }
    }
  }
`
export type CreateInquiryMutationFn = Apollo.MutationFunction<
  CreateInquiryMutation,
  CreateInquiryMutationVariables
>

/**
 * __useCreateInquiryMutation__
 *
 * To run a mutation, you first call `useCreateInquiryMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateInquiryMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createInquiryMutation, { data, loading, error }] = useCreateInquiryMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateInquiryMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateInquiryMutation,
    CreateInquiryMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    CreateInquiryMutation,
    CreateInquiryMutationVariables
  >(CreateInquiryDocument, options)
}
export type CreateInquiryMutationHookResult = ReturnType<
  typeof useCreateInquiryMutation
>
export type CreateInquiryMutationResult =
  Apollo.MutationResult<CreateInquiryMutation>
export type CreateInquiryMutationOptions = Apollo.BaseMutationOptions<
  CreateInquiryMutation,
  CreateInquiryMutationVariables
>
export const DeleteGolfDocument = gql`
  mutation deleteGolf($input: DeleteGolfInput!) {
    deleteGolf(input: $input) {
      id
    }
  }
`
export type DeleteGolfMutationFn = Apollo.MutationFunction<
  DeleteGolfMutation,
  DeleteGolfMutationVariables
>

/**
 * __useDeleteGolfMutation__
 *
 * To run a mutation, you first call `useDeleteGolfMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteGolfMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteGolfMutation, { data, loading, error }] = useDeleteGolfMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteGolfMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteGolfMutation,
    DeleteGolfMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<DeleteGolfMutation, DeleteGolfMutationVariables>(
    DeleteGolfDocument,
    options,
  )
}
export type DeleteGolfMutationHookResult = ReturnType<
  typeof useDeleteGolfMutation
>
export type DeleteGolfMutationResult = Apollo.MutationResult<DeleteGolfMutation>
export type DeleteGolfMutationOptions = Apollo.BaseMutationOptions<
  DeleteGolfMutation,
  DeleteGolfMutationVariables
>
export const UpdateGolfDocument = gql`
  mutation updateGolf($input: UpdateGolfInput!) {
    updateGolf(input: $input) {
      golf {
        id
        title
        description
      }
    }
  }
`
export type UpdateGolfMutationFn = Apollo.MutationFunction<
  UpdateGolfMutation,
  UpdateGolfMutationVariables
>

/**
 * __useUpdateGolfMutation__
 *
 * To run a mutation, you first call `useUpdateGolfMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateGolfMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateGolfMutation, { data, loading, error }] = useUpdateGolfMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateGolfMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateGolfMutation,
    UpdateGolfMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<UpdateGolfMutation, UpdateGolfMutationVariables>(
    UpdateGolfDocument,
    options,
  )
}
export type UpdateGolfMutationHookResult = ReturnType<
  typeof useUpdateGolfMutation
>
export type UpdateGolfMutationResult = Apollo.MutationResult<UpdateGolfMutation>
export type UpdateGolfMutationOptions = Apollo.BaseMutationOptions<
  UpdateGolfMutation,
  UpdateGolfMutationVariables
>
export const CurrentUserDocument = gql`
  query CurrentUser {
    currentUser {
      id
      email
    }
  }
`

/**
 * __useCurrentUserQuery__
 *
 * To run a query within a React component, call `useCurrentUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useCurrentUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCurrentUserQuery({
 *   variables: {
 *   },
 * });
 */
export function useCurrentUserQuery(
  baseOptions?: Apollo.QueryHookOptions<
    CurrentUserQuery,
    CurrentUserQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<CurrentUserQuery, CurrentUserQueryVariables>(
    CurrentUserDocument,
    options,
  )
}
export function useCurrentUserLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    CurrentUserQuery,
    CurrentUserQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<CurrentUserQuery, CurrentUserQueryVariables>(
    CurrentUserDocument,
    options,
  )
}
export type CurrentUserQueryHookResult = ReturnType<typeof useCurrentUserQuery>
export type CurrentUserLazyQueryHookResult = ReturnType<
  typeof useCurrentUserLazyQuery
>
export type CurrentUserQueryResult = Apollo.QueryResult<
  CurrentUserQuery,
  CurrentUserQueryVariables
>
export const GolfDocument = gql`
  query Golf($id: ID!) {
    golf(id: $id) {
      id
      title
      description
    }
  }
`

/**
 * __useGolfQuery__
 *
 * To run a query within a React component, call `useGolfQuery` and pass it any options that fit your needs.
 * When your component renders, `useGolfQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGolfQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGolfQuery(
  baseOptions: Apollo.QueryHookOptions<GolfQuery, GolfQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GolfQuery, GolfQueryVariables>(GolfDocument, options)
}
export function useGolfLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GolfQuery, GolfQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GolfQuery, GolfQueryVariables>(
    GolfDocument,
    options,
  )
}
export type GolfQueryHookResult = ReturnType<typeof useGolfQuery>
export type GolfLazyQueryHookResult = ReturnType<typeof useGolfLazyQuery>
export type GolfQueryResult = Apollo.QueryResult<GolfQuery, GolfQueryVariables>
export const GolfsDocument = gql`
  query Golfs {
    golfs {
      id
      title
      description
    }
  }
`

/**
 * __useGolfsQuery__
 *
 * To run a query within a React component, call `useGolfsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGolfsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGolfsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGolfsQuery(
  baseOptions?: Apollo.QueryHookOptions<GolfsQuery, GolfsQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<GolfsQuery, GolfsQueryVariables>(
    GolfsDocument,
    options,
  )
}
export function useGolfsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<GolfsQuery, GolfsQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<GolfsQuery, GolfsQueryVariables>(
    GolfsDocument,
    options,
  )
}
export type GolfsQueryHookResult = ReturnType<typeof useGolfsQuery>
export type GolfsLazyQueryHookResult = ReturnType<typeof useGolfsLazyQuery>
export type GolfsQueryResult = Apollo.QueryResult<
  GolfsQuery,
  GolfsQueryVariables
>
export const InquiriesDocument = gql`
  query Inquiries {
    inquiries {
      id
      title
      description
      name
      contact
    }
  }
`

/**
 * __useInquiriesQuery__
 *
 * To run a query within a React component, call `useInquiriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useInquiriesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useInquiriesQuery({
 *   variables: {
 *   },
 * });
 */
export function useInquiriesQuery(
  baseOptions?: Apollo.QueryHookOptions<
    InquiriesQuery,
    InquiriesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<InquiriesQuery, InquiriesQueryVariables>(
    InquiriesDocument,
    options,
  )
}
export function useInquiriesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    InquiriesQuery,
    InquiriesQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<InquiriesQuery, InquiriesQueryVariables>(
    InquiriesDocument,
    options,
  )
}
export type InquiriesQueryHookResult = ReturnType<typeof useInquiriesQuery>
export type InquiriesLazyQueryHookResult = ReturnType<
  typeof useInquiriesLazyQuery
>
export type InquiriesQueryResult = Apollo.QueryResult<
  InquiriesQuery,
  InquiriesQueryVariables
>
export const InquiryDocument = gql`
  query Inquiry($id: ID!) {
    inquiry(id: $id) {
      id
      title
      description
      name
      contact
    }
  }
`

/**
 * __useInquiryQuery__
 *
 * To run a query within a React component, call `useInquiryQuery` and pass it any options that fit your needs.
 * When your component renders, `useInquiryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useInquiryQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useInquiryQuery(
  baseOptions: Apollo.QueryHookOptions<InquiryQuery, InquiryQueryVariables>,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<InquiryQuery, InquiryQueryVariables>(
    InquiryDocument,
    options,
  )
}
export function useInquiryLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    InquiryQuery,
    InquiryQueryVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<InquiryQuery, InquiryQueryVariables>(
    InquiryDocument,
    options,
  )
}
export type InquiryQueryHookResult = ReturnType<typeof useInquiryQuery>
export type InquiryLazyQueryHookResult = ReturnType<typeof useInquiryLazyQuery>
export type InquiryQueryResult = Apollo.QueryResult<
  InquiryQuery,
  InquiryQueryVariables
>
